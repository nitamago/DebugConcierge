import java.util.List;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.Block;
import org.eclipse.jdt.core.dom.Expression;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.SimpleType;
import org.eclipse.jdt.core.dom.Statement;
import org.eclipse.jdt.core.dom.Type;
import org.eclipse.jdt.core.dom.VariableDeclaration;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.eclipse.jdt.internal.compiler.lookup.VariableBinding;

public class Visitor extends ASTVisitor {
	public Visitor(){
		super();
	}
	
	public boolean visit(SimpleName node){
		String string = node.getFullyQualifiedName();
		if (node.resolveBinding() instanceof VariableBinding) {
			System.out.println(string);
		}
		return super.visit(node);
	}
	
	public boolean visit(VariableDeclarationFragment node){
		int i;
		SimpleName sn = node.getName();
		ASTNode _node = node.getParent();
		if (_node instanceof VariableDeclarationStatement) {
			VariableDeclarationStatement vds = (VariableDeclarationStatement)_node;
			Type type = vds.getType();
		}
		sn.setIdentifier("TOKEN");
		System.out.println(sn.toString());
		return super.visit(node);
	}

	public boolean visit(MethodInvocation node) {
		Expression ex = node.getExpression();
		if (ex instanceof SimpleName) {
			SimpleName _sn = (SimpleName)ex;
			_sn.setIdentifier("TOKEN");
			//SimpleName _sn = ex.getAST().newSimpleName("TOKEN");
			//node.setExpression(_sn);
			System.out.println(_sn.toString());
		}
		
		for (Object arg_node : node.arguments()) {
			if (arg_node instanceof SimpleName) {
				SimpleName _sn = (SimpleName)arg_node;
				_sn.setIdentifier("TOKEN");
				System.out.println(_sn.toString());
			}
		}
		return super.visit(node);
	}
}
